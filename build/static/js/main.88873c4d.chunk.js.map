{"version":3,"sources":["img/floor-plant.gif","Map/MapSearch.tsx","Map/Map.tsx","App.tsx","index.tsx","Map/MapSearch.module.css"],"names":["module","exports","__webpack_require__","p","MapSearch","searchIcon","react_default","a","createElement","index_es","icon","faSearch","className","action","method","classes","searchContainer","type","name","searchButton","Map","_ref","width","height","canvasRef","useRef","zoomInRef","zoomOutRef","_useState","useState","scale","_useState2","Object","slicedToArray","scaleState","setScaleState","_useState3","x","window","innerWidth","y","innerHeight","_useState4","translateState","_useState5","mapImg","Image","src","MapImg","mapImageState","_useState7","markerImg","Marker","firstDraw","onload","draw","useEffect","current","context","getContext","translate","naturalWidth","naturalHeight","drawImage","zoomInHandle","useCallback","zoomInButton","addEventListener","removeEventListener","style","display","justifyContent","margin","ref","defaultProps","app","Map_MapSearch","src_Map_Map","ReactDOM","render","App","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sLCiBzBC,EAZG,WACd,IAAMC,EAAaC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBC,KAAMC,IAAUC,UAAU,cAC9D,OAAON,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,QAAMK,OAAO,IAAIC,OAAO,OACpBR,EAAAC,EAAAC,cAAA,OAAKI,UAAWG,IAAQC,iBACpBV,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,KAAK,iBACxBZ,EAAAC,EAAAC,cAAA,UAAQI,UAAWG,IAAQI,cAAed,gDCGxDe,EAAM,SAAAC,GAAoC,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,OAEZC,EAAYC,iBAA0B,MACtCC,EAAYD,iBAA0B,MACtCE,EAAaF,iBAA0B,MAJDG,EAYRC,mBAAS,CAACC,MAAO,KAZTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAYrCM,EAZqCH,EAAA,GAYzBI,EAZyBJ,EAAA,GAAAK,EAcAP,mBAAS,CAACQ,EAAGC,OAAOC,WAAa,EAAGC,EAAGF,OAAOG,YAAc,IAd5DC,EAAAV,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAcrCO,EAdqCD,EAAA,GAAAE,GAAAF,EAAA,GAgBpBb,mBACpB,WACI,IAAMgB,EAAS,IAAIC,MAEnB,OADAD,EAAOE,IAAMC,IACNH,KAJRI,EAhBqCjB,OAAAC,EAAA,EAAAD,CAAAY,EAAA,MAAAM,EAwBjBrB,mBACvB,WACI,IAAMsB,EAAY,IAAIL,MAEtB,OADAK,EAAUJ,IAAMK,IACTD,IAYTE,GAxCsCrB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,MAwC1B,WACdZ,OAAOgB,OAAS,WACZC,OAIRC,oBAAU,WACNH,KACD,IAEH,IAAME,EAAO,WACT,GAAK/B,EAAUiC,QAAf,CAGA,IACMC,EAD4BlC,EAAUiC,QACrBE,WAAW,MAElC,GAAID,EAAS,CAITA,EAAQE,UAAUjB,EAAeN,EAAGM,EAAeH,GACnDkB,EAAQ5B,MAAMI,EAAWJ,MAAOI,EAAWJ,OAC3C,IAAMO,GAAKY,EAAcY,aAAe,EAClCrB,GAAKS,EAAca,cAAgB,EACzCJ,EAAQK,UAAUd,EAAeZ,EAAGG,MAItCwB,EAAeC,sBAAY,WAE7B9B,EACI,CAACL,MAAOI,EAAWJ,OAlEH,MAqFrB,IA0BH,OAxBA0B,oBAAU,WAEN,GAAK9B,EAAU+B,QAAf,CAIA,IAAMS,EAAkCxC,EAAU+B,QAIlD,OAFAS,EAAaC,iBAAiB,YAAaH,GAEpC,WACHE,EAAaE,oBAAoB,YAAaJ,MAGnD,IAMHR,oBAAU,WACNH,KACD,IAEI/C,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAK6D,MAAO,CAACC,QAAQ,OAAQC,eAAe,SAAUC,OAAO,SACzDlE,EAAAC,EAAAC,cAAA,UAAQiE,IAAK/C,GAAb,KACApB,EAAAC,EAAAC,cAAA,UAAQiE,IAAK9C,GAAb,MAEJrB,EAAAC,EAAAC,cAAA,UAAQiE,IAAKjD,EAAWD,OAAQA,EAAQD,MAAOA,MAK3DF,EAAIsD,aAAe,CACfpD,MAAOgB,OAAOC,WACdhB,OAAQe,OAAOG,aAGJrB,QCvIAuD,EAPH,WACR,OAAOrE,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAACoE,EAAD,MACAtE,EAAAC,EAAAC,cAACqE,EAAD,QCHhBC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAQC,SAASC,eAAe,4BCHhDlF,EAAAC,QAAA,CAAkBe,gBAAA,mCAAAG,aAAA","file":"static/js/main.88873c4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/floor-plant.978447f2.gif\";","import React from 'react';\r\nimport classes from './MapSearch.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport  { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst MapSearch = () => {\r\n    const searchIcon = <FontAwesomeIcon icon={faSearch} className=\"fas fa-lg\" />\r\n    return <header>\r\n            <form action=\"#\" method=\"GET\">\r\n                <div className={classes.searchContainer}>\r\n                    <input type=\"text\" name=\"search-input\" />\r\n                    <button className={classes.searchButton}>{searchIcon}</button>\r\n                </div>\r\n            </form>\r\n        </header>;\r\n}\r\n\r\nexport default MapSearch;","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport MapImg from '../img/floor-plant.gif';\r\nimport Marker from '@fortawesome/fontawesome-free/svgs/solid/map-marker-alt.svg';\r\n\r\ninterface CanvasProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ntype Coordinate = {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\nconst Map = ({ width, height }: CanvasProps) => {\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const zoomInRef = useRef<HTMLButtonElement>(null);\r\n    const zoomOutRef = useRef<HTMLButtonElement>(null);\r\n\r\n    const scaleMultiplier = 0.8;\r\n\r\n    // const [contextState, setContextState] = useState<CanvasRenderingContext2D | undefined>(undefined);\r\n\r\n    // const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);\r\n\r\n    const [scaleState, setScaleState] = useState({scale: 0.3});\r\n\r\n    const [translateState, setTranslateState] = useState({x: window.innerWidth / 2, y: window.innerHeight / 2});\r\n\r\n    const [mapImageState] = useState(\r\n        () => {\r\n            const mapImg = new Image();\r\n            mapImg.src = MapImg;\r\n            return mapImg\r\n        }\r\n    );\r\n\r\n    const [markerImageState] = useState(\r\n        () => {\r\n            const markerImg = new Image();\r\n            markerImg.src = Marker;\r\n            return markerImg;\r\n        }\r\n    );\r\n\r\n    // const markeMap = useCallback((event: MouseEvent) => {\r\n        \r\n    // }, []);\r\n\r\n    // const moveMap = useCallback((event: MouseEvent) => {\r\n        \r\n    // }, []);\r\n\r\n    const firstDraw = () => {\r\n        window.onload = () => {\r\n            draw();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        firstDraw();\r\n    }, []);\r\n\r\n    const draw = () => {\r\n        if (!canvasRef.current) {\r\n            return;\r\n        }\r\n        const canvas: HTMLCanvasElement = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n\r\n        if (context) {\r\n\r\n            // setContextState(context);\r\n\r\n            context.translate(translateState.x, translateState.y);\r\n            context.scale(scaleState.scale, scaleState.scale);\r\n            const x = -mapImageState.naturalWidth / 2;\r\n            const y = -mapImageState.naturalHeight / 2;\r\n            context.drawImage(mapImageState, x, y);\r\n        }\r\n    };\r\n\r\n    const zoomInHandle = useCallback(() => {\r\n        \r\n        setScaleState( \r\n            {scale: scaleState.scale /= scaleMultiplier}\r\n            \r\n        );\r\n\r\n        // if (!canvasRef.current) {\r\n        //     return;\r\n        // }\r\n\r\n        // const canvas: HTMLCanvasElement = canvasRef.current;\r\n        // const context = canvas.getContext('2d');\r\n\r\n        // if (contextState) {\r\n        //     console.log(\"mapImageState\");\r\n        //     contextState.scale(scaleState.scale, scaleState.scale);\r\n        //     // const x = -mapImageState.naturalWidth;\r\n        //     // const y = -mapImageState.naturalHeight;\r\n        //     // contextState.drawImage(mapImageState, x, y);\r\n        // }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (!zoomInRef.current) {\r\n            return;\r\n        }\r\n\r\n        const zoomInButton: HTMLButtonElement = zoomInRef.current;\r\n        \r\n        zoomInButton.addEventListener('mousedown', zoomInHandle);\r\n        \r\n        return () => {\r\n            zoomInButton.removeEventListener('mousedown', zoomInHandle);\r\n        };\r\n\r\n    }, []);\r\n\r\n    // const zoomOut = useCallback((event: MouseEvent) => {\r\n        \r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        firstDraw();\r\n    }, []);\r\n\r\n    return <div>\r\n            <div style={{display:'flex', justifyContent:'center', margin:'10px'}}>\r\n                <button ref={zoomInRef}>+</button>\r\n                <button ref={zoomOutRef}>-</button>\r\n            </div>\r\n            <canvas ref={canvasRef} height={height} width={width} />\r\n            </div>;\r\n\r\n};\r\n\r\nMap.defaultProps = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n};\r\n\r\nexport default Map;\r\n\r\n\r\n// const Map = props => {\r\n\r\n//     const canvasRef = useRef();\r\n//     const zoomIn = useRef();\r\n//     const zoomOut = useRef();\r\n    \r\n//     const scaleMultiplier = 0.8;\r\n\r\n//     let [canvasState, setCanvasState] = useState();\r\n\r\n//     let [boundingClientRectState, setBoundingClientRectState] = useState();\r\n\r\n//     let [scaleState, setScaleState] = useState(0.3);\r\n\r\n//     let [translateState, setTranslateState] = useState({x: window.innerWidth / 2, y: window.innerHeight / 2});\r\n\r\n//     let [mouseDownState, setMouseDownState] = useState(false);\r\n\r\n//     let [startDragOffsetState, setStartDragOffsetState] = useState({x: 0, y: 0});\r\n\r\n//     const [mapImageState] = useState(\r\n//         () => {\r\n//             const mapImg = new Image();\r\n//             mapImg.src = MapImg;\r\n//             return mapImg;\r\n//         }\r\n//     );\r\n\r\n//     const [markerImageState] = useState(\r\n//         () => {\r\n//             const markerImg = new Image();\r\n//             markerImg.src = Marker;\r\n//             return markerImg;\r\n//         }\r\n//     );\r\n\r\n//     const [contextState] = useState(\r\n//         () => {\r\n//             let canvas = canvasState;\r\n//             canvas.width = window.innerWidth;\r\n//             canvas.height = window.innerHeight;\r\n//             let context = canvas.getContext('2d');\r\n            \r\n//             return context;\r\n//         }\r\n//     );\r\n\r\n//     // const getContext = () => {\r\n//     //     let canvas = canvasState;\r\n//     //     canvas.width = window.innerWidth;\r\n//     //     canvas.height = window.innerHeight;\r\n//     //     let context = canvas.getContext('2d');\r\n        \r\n//     //     return context;\r\n//     // };\r\n\r\n//     // const getMapImage = () => {\r\n//     //     const mapImg = new Image();\r\n//     //     mapImg.src = MapImg;\r\n//     //     return mapImg;\r\n//     // };\r\n\r\n//     // const getMarkerImage = () => {\r\n//     //     const markerImg = new Image();\r\n//     //     markerImg.src = Marker;\r\n//     //     return markerImg;\r\n//     // };\r\n\r\n//     const zoomInHandle = () => {\r\n//         scaleState /= scaleMultiplier;\r\n//         setScaleState(scaleState);\r\n//         setScale();\r\n//     };\r\n\r\n//     const zoomOutHandle = () => {\r\n//         scaleState *= scaleMultiplier;\r\n//         setScaleState(scaleState);\r\n//         setScale();\r\n//     };\r\n\r\n//     const getMouseDown = props => {\r\n//         setMouseDownState(mouseDownState = true);\r\n//         setStartDragOffsetState(\r\n//             startDragOffsetState = {\r\n//                 x: props.clientX - translateState.x,\r\n//                 y: props.clientY - translateState.y,\r\n//             }\r\n//         );\r\n//     };\r\n    \r\n//     const getMouseMove = props => {\r\n//         if (mouseDownState) {\r\n//             setTranslateState(\r\n//                 translateState = {\r\n//                     x: props.clientX - startDragOffsetState.x,\r\n//                     y: props.clientY - startDragOffsetState.y,\r\n//                 }\r\n//             );\r\n//             setTranslate();\r\n//         }\r\n//     };\r\n\r\n//     const setMouseDonwFalse = () => {\r\n//         setMouseDownState(mouseDownState = false);\r\n//     };\r\n\r\n//     // const canvas = contextState;\r\n//     // canvas.translate(translateState.x, translateState.y);\r\n//     // canvas.scale(scaleState, scaleState);\r\n\r\n//     const setTranslate = () => {\r\n//         contextState.translate(translateState.x, translateState.y);\r\n//         draw();\r\n//     };\r\n\r\n//     const setScale = () => {\r\n//         contextState.scale(scaleState, scaleState);\r\n//         draw();\r\n//     };\r\n\r\n//     const draw = () => {\r\n\r\n//         contextState.translate(translateState.x, translateState.y);\r\n//         contextState.scale(scaleState, scaleState);\r\n//         const x = -mapImageState.naturalWidth / 2;\r\n//         const y = -mapImageState.naturalHeight / 2;\r\n\r\n//         contextState.drawImage(mapImageState, x, y);\r\n\r\n//         // let canvasMapImage = canvas.getImageData(0, 0, mapImageState.naturalWidth, mapImageState.naturalHeight);\r\n//         // setCanvasMapImageState(canvasMapImageState = canvasMapImage);\r\n    \r\n//     };\r\n\r\n//     const mapMarker = props => {\r\n        \r\n//         // const canvas = contextState;\r\n\r\n//         const rect = boundingClientRectState;\r\n\r\n//         const mouseXPos = props.clientX - rect.left;\r\n//         const mouseYPos = props.clientY - rect.top;\r\n\r\n//         const w = markerImageState.width / 2;\r\n//         const h = markerImageState.height / 2;\r\n        \r\n//         const x = mouseXPos - (w / 2);\r\n//         const y = mouseYPos - h;\r\n\r\n//         // const x = mouseXPos - (markerImageState.width / 2);\r\n//         // const y = mouseYPos - markerImageState.height;\r\n        \r\n//         contextState.drawImage(markerImageState, x, y, w, h);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const canvas = canvasRef.current;\r\n\r\n//         setCanvasState(canvasState = canvas);\r\n        \r\n//         setBoundingClientRectState(boundingClientRectState = canvas.getBoundingClientRect());\r\n\r\n//         canvas.addEventListener('mousedown', getMouseDown);\r\n\r\n//         canvas.addEventListener('mouseup', setMouseDonwFalse);\r\n\r\n//         canvas.addEventListener('mouseover', setMouseDonwFalse);\r\n\r\n//         canvas.addEventListener('mouseout', setMouseDonwFalse);\r\n\r\n//         canvas.addEventListener('mousemove', getMouseMove);\r\n\r\n//         canvas.addEventListener('dblclick', mapMarker);\r\n\r\n//         const btnZoomIn = zoomIn.current;\r\n//         btnZoomIn.addEventListener('click', zoomInHandle);\r\n\r\n//         const btnZoomOut = zoomOut.current;\r\n//         btnZoomOut.addEventListener('click', zoomOutHandle);\r\n        \r\n//         window.onload = () => {\r\n//             draw();\r\n//         }\r\n//     }, []);\r\n\r\n//     return <div>\r\n//                 <div style={{display:'flex', justifyContent:'center', margin:'10px'}}>\r\n//                     <button ref={zoomIn}>+</button>\r\n//                     <button ref={zoomOut}>-</button>\r\n//                 </div>\r\n//                 <canvas ref={canvasRef} {...props}/>\r\n//             </div>;\r\n\r\n// }\r\n\r\n","import React from 'react';\r\nimport MapSearch from './Map/MapSearch';\r\nimport Map from './Map/Map';\r\n\r\nconst app = () => {\r\n    return <div>\r\n                <MapSearch/> \r\n                <Map/>\r\n            </div>;\r\n}\r\n\r\nexport default app;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"MapSearch_searchContainer__2mKsF\",\"searchButton\":\"MapSearch_searchButton__3eOlu\"};"],"sourceRoot":""}