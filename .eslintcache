[{"D:\\My Documents\\building-map\\src\\index.tsx":"1","D:\\My Documents\\building-map\\src\\reportWebVitals.ts":"2","D:\\My Documents\\building-map\\src\\App.tsx":"3","D:\\My Documents\\building-map\\src\\Components\\Login\\Login.tsx":"4","D:\\My Documents\\building-map\\src\\Components\\Map\\Map.tsx":"5","D:\\My Documents\\building-map\\src\\firebase.js":"6","D:\\My Documents\\building-map\\src\\Components\\Map\\MapZoom.tsx":"7","D:\\My Documents\\building-map\\src\\Components\\Map\\MapSearch.tsx":"8","D:\\My Documents\\building-map\\src\\Interfaces\\Canvas.tsx":"9","D:\\My Documents\\building-map\\src\\Components\\Person\\PersonForm.tsx":"10","D:\\My Documents\\building-map\\src\\Interfaces\\Person.tsx":"11","D:\\My Documents\\building-map\\src\\Components\\Map\\MapSignout.tsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":449,"mtime":1609071437273,"results":"16","hashOfConfig":"14"},{"size":3568,"mtime":1609098009992,"results":"17","hashOfConfig":"14"},{"size":11666,"mtime":1609095481573,"results":"18","hashOfConfig":"14"},{"size":577,"mtime":1609069969621,"results":"19","hashOfConfig":"14"},{"size":1385,"mtime":1609069969280,"results":"20","hashOfConfig":"14"},{"size":2758,"mtime":1609069969280,"results":"21","hashOfConfig":"14"},{"size":435,"mtime":1609069969534,"results":"22","hashOfConfig":"14"},{"size":8017,"mtime":1609098227942,"results":"23","hashOfConfig":"14"},{"size":1126,"mtime":1609095429661,"results":"24","hashOfConfig":"14"},{"size":515,"mtime":1609098599225,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mjc631",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"D:\\My Documents\\building-map\\src\\index.tsx",[],["57","58"],"D:\\My Documents\\building-map\\src\\reportWebVitals.ts",[],"D:\\My Documents\\building-map\\src\\App.tsx",[],"D:\\My Documents\\building-map\\src\\Components\\Login\\Login.tsx",["59"],"import React, { useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport firebase from \"../../firebase\";\r\n\r\nimport classes from \"./Login.module.css\";\r\n\r\ninterface LoginParam {\r\n    userName: string,\r\n    password: string,\r\n    isAdmin?: boolean\r\n}\r\n\r\nconst login: LoginParam = {\r\n    userName: \"\",\r\n    password: \"\",\r\n    isAdmin: false\r\n}\r\n\r\ninterface FeedbackMessage {\r\n    msg: string,\r\n    color: string\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const feedbackMessage = useRef<HTMLDivElement>(null);\r\n    \r\n    const [loginState, setLoginState] = useState<LoginParam>(login);\r\n    const [feedbackMessageState, setFeedbackMessageState] = useState<FeedbackMessage>({msg: \"\", color: \"\"});\r\n\r\n    const history = useHistory();\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n\r\n        for(let key in loginState){\r\n            if(key === event.target.name){\r\n                setLoginState({\r\n                    ...loginState,\r\n                    [event.target.name]: event.target.value,\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const loginHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        event.preventDefault();\r\n\r\n        firebase.ref('/login').on('value', data => {\r\n            if(!data.val()){\r\n                return;\r\n            }\r\n\r\n            let loginData = data.val();\r\n            let login: LoginParam; \r\n            let count: number = 0;\r\n            \r\n            for(const key in loginData){\r\n\r\n                login = loginData[key];\r\n\r\n                if(login.userName === loginState.userName && login.password === loginState.password){\r\n                    setLoginState(loginData);\r\n                    history.push(\"/map?userName=\" + login.userName + \"&isAdmin=\" + login.isAdmin);\r\n                    return;\r\n                }else{\r\n                    count++;\r\n                }\r\n                \r\n            }\r\n\r\n            if(count === Object.keys(loginData).length){\r\n                setFeedbackMessageState({msg: \"User not found\", color: \"red\"});\r\n                history.push(\"/\");\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    return <>\r\n            <form className={classes.loginForm} onSubmit={loginHandler}>\r\n                <div><h3>Log In</h3></div>\r\n                <div ref={feedbackMessage} className={classes.feedbackMessage}>\r\n                    <a style={{color: feedbackMessageState? feedbackMessageState.color : undefined}}>{feedbackMessageState? feedbackMessageState.msg : undefined}</a>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" \r\n                        name=\"userName\" \r\n                        value={loginState.userName} \r\n                        onChange={inputChangeHandler} \r\n                        id=\"userName\" \r\n                        placeholder=\"User Name\" \r\n                        title=\"Field user name\"/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" \r\n                        name=\"password\" \r\n                        value={loginState.password} \r\n                        onChange={inputChangeHandler} \r\n                        id=\"password\" \r\n                        placeholder=\"Password\" \r\n                        title=\"Field password\"/>\r\n                </div>\r\n                <div className={classes.btn}>\r\n                    <button type=\"submit\" title=\"Button Login\">Login</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n\r\n}\r\n\r\nexport default Login;\r\n","D:\\My Documents\\building-map\\src\\Components\\Map\\Map.tsx",["60","61","62","63","64","65","66","67"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport queryString from 'query-string';\r\nimport Canvas, { canvas } from \"../../Interfaces/Canvas\";\r\nimport Person, { Coordinate, possition, person, User ,user } from \"../../Interfaces/Person\";\r\nimport PersonForm from \"../../Components/Person/PersonForm\";\r\n\r\nimport MapSearch from \"./MapSearch\";\r\nimport MapZoom from \"./MapZoom\";\r\nimport MapSignout from \"./MapSignout\";\r\n\r\nimport MapImg from \"../../img/floor-plant.gif\";\r\nimport Marker from '@fortawesome/fontawesome-free/svgs/solid/map-marker-alt.svg';\r\nimport classes from \"./Map.module.css\";\r\n\r\ninterface DrawMapProps{\r\n    scale: number,\r\n    translateX: number,\r\n    translateY: number\r\n}\r\n\r\nconst Map = ({ width, height }: Canvas) => {\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const personFormRef = useRef<HTMLDivElement>(null);\r\n    const personInfoRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [canvasState, setCanvasState] = useState<Canvas>(canvas);\r\n    const [personListState, setPersonListState] = useState<Person[]>([]);\r\n    const [possitionState, setPossitionState] = useState<Coordinate>(possition);\r\n    const [personInfoState, setPersonInfoState] = useState<Person>(person);\r\n    const [idToDeleteState, setIdToDeleteState] = useState<string>('');\r\n    const [userState, setUserState] = useState<User>(user);\r\n    \r\n    const moveCoordinate: Coordinate = possition;\r\n    let mouseDown = false;\r\n    \r\n    const mapImg: HTMLImageElement = new Image();\r\n    mapImg.src = MapImg;\r\n\r\n    const markerImg: HTMLImageElement = new Image();\r\n    markerImg.src = Marker;\r\n\r\n    const getCanvas = () => {\r\n\r\n        if (!canvasRef.current) {\r\n            return;\r\n        }\r\n\r\n        const htmlCanvasElement: HTMLCanvasElement = canvasRef.current;\r\n        const context = htmlCanvasElement.getContext('2d');\r\n\r\n        if(!context){\r\n            return;\r\n        }\r\n        \r\n        setCanvasState(\r\n            {\r\n                canvas: htmlCanvasElement,\r\n                context: context,\r\n                scale: 0.3,\r\n                translate: {x: window.innerWidth / 2, \r\n                            y: window.innerHeight / 2,\r\n                            scale: 0,\r\n                            imgBase64: ''\r\n                            }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const user = queryString.parse(window.location.search);\r\n        setUserState(\r\n            { \r\n                userName: user.userName? user.userName.toString(): \"\",\r\n                isAdmin: user.isAdmin === \"true\"? true : false\r\n            }\r\n        );\r\n        getCanvas();\r\n\r\n    }, []);\r\n\r\n    const drawMap = (props: DrawMapProps = \r\n        {\r\n            scale: 0,\r\n            translateX: 0,\r\n            translateY: 0\r\n        }\r\n    ) => {\r\n\r\n        if(!canvasState.canvas){\r\n            return;\r\n        } \r\n        \r\n        if(!canvasState.context){\r\n            return;\r\n        } \r\n        \r\n        if(!canvasState.translate){\r\n            return;\r\n        } \r\n\r\n        if(!canvasState.scale){\r\n            return;\r\n        } \r\n\r\n        const canvas: HTMLCanvasElement = canvasState.canvas;\r\n        const context: CanvasRenderingContext2D = canvasState.context;\r\n\r\n        \r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        context.save();\r\n        context.translate(\r\n            props.translateX === 0? canvasState.translate.x : props.translateX, \r\n            props.translateY === 0? canvasState.translate.y : props.translateY\r\n        );\r\n        props.scale === 0? context.scale(canvasState.scale, canvasState.scale) : context.scale(props.scale, props.scale);\r\n        context.beginPath();\r\n\r\n        const x = -mapImg.width / 2;\r\n        const y = -mapImg.height / 2;\r\n        context.drawImage(mapImg, x, y);\r\n\r\n        context.restore();\r\n\r\n    }\r\n    \r\n    useEffect(() => {\r\n\r\n        window.onload = () => {\r\n            drawMap();\r\n        }\r\n\r\n    }, [canvasState]);\r\n\r\n    const zoomHandler = (scale: number) => {\r\n\r\n        canvasState.scale = scale;\r\n\r\n        drawMap();\r\n\r\n    }\r\n\r\n    // const contentPossitionHandler: any = (event: React.MouseEvent<HTMLCanvasElement>) => {\r\n        \r\n    //     mouseDown = true;\r\n        \r\n    //     if(!canvasState.translate){\r\n    //         return;\r\n    //     }\r\n\r\n    //     moveCoordinate.x = event.clientX - canvasState.translate.x;\r\n    //     moveCoordinate.y = event.clientY - canvasState.translate.y;\r\n\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     if (!canvasRef.current) {\r\n    //         return;\r\n    //     }\r\n    //     const canvas: HTMLCanvasElement = canvasRef.current;\r\n    //     canvas.addEventListener('mousedown', contentPossitionHandler);\r\n    //     return () => {\r\n    //         canvas.removeEventListener('mousedown', contentPossitionHandler);\r\n    //     };\r\n    // }, [canvasState]);\r\n\r\n    // const newContentPossitionHandler: any = (event: React.MouseEvent<HTMLCanvasElement>) => {\r\n\r\n    //     if(!canvasState.translate){\r\n    //         return;\r\n    //     }\r\n        \r\n    //     if(mouseDown){\r\n    //         canvasState.translate.x = event.clientX - moveCoordinate.x;\r\n    //         canvasState.translate.y = event.clientY - moveCoordinate.y;\r\n    //         drawMap();\r\n    //     }\r\n    // };\r\n\r\n    // const setMouseDownFalse = () => {\r\n    //     mouseDown = false;\r\n    // }\r\n\r\n    // useEffect(() => {\r\n\r\n    //     if (!canvasRef.current) {\r\n    //         return;\r\n    //     }\r\n    //     const canvas: HTMLCanvasElement = canvasRef.current;\r\n    //     canvas.addEventListener('mousemove', newContentPossitionHandler);\r\n    //     canvas.addEventListener('mouseup', setMouseDownFalse);\r\n    //     canvas.addEventListener('mouseover', setMouseDownFalse);\r\n    //     canvas.addEventListener('mouseout', setMouseDownFalse);\r\n    //     return () => {\r\n    //         canvas.removeEventListener('mousemove', newContentPossitionHandler);\r\n    //         canvas.addEventListener('mouseup', setMouseDownFalse);\r\n    //         canvas.addEventListener('mouseover', setMouseDownFalse);\r\n    //         canvas.addEventListener('mouseout', setMouseDownFalse);\r\n    //     };\r\n\r\n    // }, [canvasState]);\r\n\r\n    const addPersonHandler = (event: any) => {\r\n\r\n        if(!canvasState.canvas){\r\n            return;\r\n        } \r\n        \r\n        if(!canvasState.context){\r\n            return;\r\n        } \r\n\r\n        if(!canvasState.scale){\r\n            return;\r\n        }\r\n\r\n        const canvas = canvasState.canvas;\r\n        const context = canvasState.context;\r\n        \r\n        possition.x = event.offsetX;\r\n        possition.y = event.offsetY;\r\n\r\n        const rect = canvas.getBoundingClientRect();\r\n\r\n        const mouseXPos = event.clientX - rect.left;\r\n        const mouseYPos = event.clientY - rect.top;\r\n\r\n        const w = markerImg.width / 4;\r\n        const h = markerImg.height / 4;\r\n        const x = mouseXPos - (w / 2);\r\n        const y = mouseYPos - h;\r\n\r\n        possitionState.scale = canvasState.scale;\r\n        \r\n        setPossitionState(\r\n            {\r\n                ...possitionState,\r\n                x: event.offsetX,\r\n                y: event.offsetX\r\n            }\r\n        );\r\n\r\n        context.drawImage(markerImg, x, y, w, h);\r\n\r\n        showPersonForm(true);\r\n\r\n    }\r\n    \r\n    useEffect(() => {\r\n\r\n        if (!canvasRef.current) {\r\n            return;\r\n        }\r\n        const canvas: HTMLCanvasElement = canvasRef.current;\r\n        canvas.addEventListener('dblclick', userState.isAdmin? addPersonHandler : () => {});\r\n        return () => {\r\n            canvas.removeEventListener('dblclick', addPersonHandler);\r\n        };\r\n\r\n    }, [canvasState]);\r\n\r\n    const drawSearchResult = (value: string) => {\r\n        \r\n        if(!canvasState.canvas){\r\n            return;\r\n        } \r\n        \r\n        if(!canvasState.context){\r\n            return;\r\n        } \r\n        \r\n        const canvas = canvasState.canvas;\r\n        const context = canvasState.context;\r\n\r\n        personListState.forEach(person => {\r\n            \r\n            if(person.firstName + ' ' + person.lastName === value){\r\n\r\n                setPersonInfoState(person);\r\n\r\n                const w = markerImg.width / 4;\r\n                const h = markerImg.height / 4;\r\n                const x = person.possition.x;\r\n                const y = person.possition.y;\r\n\r\n                const drawMapProps: DrawMapProps = {\r\n                    scale : person.possition.scale,\r\n                    translateX: 0,\r\n                    translateY: 0 \r\n                };\r\n\r\n                drawMap(drawMapProps);\r\n                context.drawImage(markerImg, x, y, w, h);\r\n                showPersonInfo(true);\r\n\r\n                return;\r\n\r\n            }\r\n            \r\n        });\r\n\r\n        \r\n    }\r\n\r\n    const showFormFilled = () => {\r\n\r\n        showPersonInfo(false);\r\n        showPersonForm(true);\r\n\r\n    }\r\n\r\n    const removePersonHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        if(!personInfoState.id){\r\n            return;\r\n        }\r\n\r\n        setIdToDeleteState(personInfoState.id);\r\n\r\n        showPersonInfo(false);\r\n\r\n        showPersonForm(true);\r\n\r\n\r\n    }\r\n\r\n    const personInfoHandler = () => {\r\n\r\n        if(!personInfoState){\r\n            return;\r\n        }\r\n\r\n        if(!personInfoState.contact){\r\n            return;\r\n        }\r\n\r\n        if(!personInfoState.contact.phone){\r\n            return;\r\n        }\r\n\r\n        return <div className={classes.personInfo}>\r\n                    <h3>{personInfoState.firstName + \" \" + personInfoState.lastName}</h3>\r\n                    <a><b>Contact</b></a>\r\n                    <a>Email: {personInfoState.contact.email}</a>\r\n                    <a>{personInfoState.contact.phone.phoneType + \": \" + personInfoState.contact.phone.phoneNumber}</a>\r\n                    <form onSubmit={removePersonHandler} className={userState.isAdmin? \"\" : classes.hideContent}>\r\n                        <button type=\"submit\">Remove</button>\r\n                        <button onClick={showFormFilled} type=\"button\">Update</button>\r\n                    </form>\r\n\r\n            </div>\r\n\r\n    }\r\n\r\n    const showPersonForm = (show: boolean) => {\r\n\r\n        if(!personFormRef.current){\r\n            return;\r\n        }\r\n\r\n        show? personFormRef.current.style.display = \"block\" : personFormRef.current.style.display = \"none\";\r\n\r\n    }\r\n\r\n    const showPersonInfo = (show: boolean) => {\r\n\r\n        if(!personInfoRef.current){\r\n            return;\r\n        }\r\n\r\n        show? personInfoRef.current.style.display = \"block\" : personInfoRef.current.style.display = \"none\";\r\n\r\n    }\r\n\r\n    return <>\r\n                <header>\r\n                    <MapSearch formSubmit={drawSearchResult} personList={personListState}/>\r\n                    <MapZoom zoomHandler={zoomHandler}/>\r\n                    <MapSignout user={userState} setUserState={setUserState}/>\r\n                </header>\r\n                <div ref={personFormRef} className={classes.hideContent}>\r\n                    <PersonForm setPersonListState={setPersonListState}\r\n                                showPersonForm={showPersonForm}\r\n                                personUpdate={personInfoState}\r\n                                personRemove={idToDeleteState}/>\r\n                </div>\r\n                <div ref={personInfoRef} className={classes.hideContent}>\r\n                    {personInfoHandler()}\r\n                </div>\r\n                <canvas ref={canvasRef} height={height} width={width} />\r\n            </>\r\n\r\n}\r\n\r\nMap.defaultProps = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n}\r\n\r\nexport default Map;","D:\\My Documents\\building-map\\src\\firebase.js",[],["68","69"],"D:\\My Documents\\building-map\\src\\Components\\Map\\MapZoom.tsx",[],"D:\\My Documents\\building-map\\src\\Components\\Map\\MapSearch.tsx",["70"],"import React, { useState, useEffect } from \"react\";\r\nimport Person from \"../../Interfaces/Person\";\r\n\r\nimport classes from \"./Map.module.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport  { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst MapSearch = (props: any) => {\r\n\r\n    const searchIcon = <span className={classes.icon}><FontAwesomeIcon icon={faSearch} className=\"fas fa-lg\" /></span>;\r\n\r\n    const [searchInputState, setSearchInputState] = useState<string>(\"\");\r\n    const [personListState, setPersonListState] = useState<Person[]>([]);\r\n    \r\n    let listOptions: string[] = [];\r\n\r\n    const listPersonHandler = () => {\r\n\r\n        props.personList.forEach((person: Person) => {\r\n            setPersonListState([...personListState, person])\r\n        });\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        listPersonHandler();\r\n\r\n    }, [props.personList]);\r\n\r\n    const searchInputOptions = () => {\r\n\r\n        personListState.forEach((person: Person) =>  {\r\n            if(!person.firstName){\r\n                return;\r\n            } \r\n            \r\n            if(!searchInputState){\r\n                return;\r\n            }    \r\n            \r\n            if(person.firstName.toLowerCase().indexOf(searchInputState.toLowerCase()) > -1){\r\n                listOptions.push(person.firstName + \" \" + person.lastName);\r\n            }\r\n            \r\n        });\r\n\r\n        return <ul className={classes.options}>\r\n            {listOptions.map((optionName: string) => {\r\n                return (\r\n                    <li className={classes.optionList} key={optionName} onClick={optionClickHandler}>\r\n                        {optionName}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>;\r\n        \r\n    }\r\n\r\n    const optionClickHandler = (event: React.MouseEvent<HTMLLIElement>) => {\r\n\r\n        setSearchInputState(event.currentTarget.innerText);\r\n\r\n    }\r\n\r\n    const searchInputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setSearchInputState(event.target.value);\r\n\r\n    }\r\n\r\n    const formSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        event.preventDefault();\r\n        \r\n        props.formSubmit(searchInputState);\r\n        \r\n    }\r\n\r\n    return <div>\r\n            <form onSubmit={formSubmitHandler}>\r\n                <div className={classes.searchContainer}>\r\n                    <input autoComplete=\"off\" onChange={searchInputHandler} value={searchInputState} type=\"text\" name=\"search-input\" />\r\n                    <button type=\"submit\" className={classes.searchButton}>{searchIcon}</button>\r\n                </div>\r\n            </form>\r\n            {searchInputOptions()}\r\n        </div>;\r\n}\r\n\r\nexport default MapSearch;","D:\\My Documents\\building-map\\src\\Interfaces\\Canvas.tsx",[],"D:\\My Documents\\building-map\\src\\Components\\Person\\PersonForm.tsx",["71","72","73","74","75"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Person, { Contact, Phone, person, contact, phone } from \"../../Interfaces/Person\";\r\nimport firebase from \"../../firebase\";\r\n\r\nimport classes from \"./Person.module.css\";\r\n\r\ninterface FeedbackMessage {\r\n    msg: string,\r\n    color: string\r\n}\r\n\r\nconst PersonForm = (props: any) => {\r\n\r\n    const feedbackMessage = useRef<HTMLDivElement>(null);\r\n    \r\n    const [personState, setPersonState] = useState<Person>(person);\r\n    const [contactState, setContactState] = useState<Contact>(contact);\r\n    const [phoneState, setPhoneState] = useState<Phone>(phone);\r\n    const [feedbackMessageState, setFeedbackMessageState] = useState<FeedbackMessage>({msg: \"\", color: \"\"});\r\n    \r\n    useEffect(() => {\r\n\r\n        if(props.personUpdate.id) setPersonState(props.personUpdate);\r\n\r\n    }, [props.personUpdate]);\r\n\r\n    const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n\r\n        for(let key in personState){\r\n            if(key === event.target.name){\r\n                setPersonState({\r\n                    ...personState,\r\n                    [event.target.name]: event.target.value,\r\n                });\r\n            }else if(event.target.name === 'email'){\r\n                contactState.email = event.target.value;\r\n                setContactState({\r\n                    ...contactState \r\n                });\r\n                setPersonState({\r\n                    ...personState,\r\n                    contact: contactState\r\n                });\r\n            }else if(event.target.name === 'phoneType'){\r\n                phoneState.phoneType = event.target.value;\r\n                setContactState({\r\n                    ...contactState,\r\n                    phone: phoneState\r\n                });\r\n                setPersonState({\r\n                    ...personState,\r\n                    contact: contactState\r\n                });\r\n            }else if(event.target.name === 'phoneNumber'){\r\n                phoneState.phoneNumber = event.target.value;\r\n                setContactState({\r\n                    ...contactState,\r\n                    phone: phoneState\r\n                });\r\n                setPersonState({\r\n                    ...personState,\r\n                    contact: contactState\r\n                });\r\n            }\r\n\r\n        } \r\n\r\n    }\r\n\r\n    const removePersonHandler = (id: string) => {\r\n\r\n        if(!feedbackMessage.current){\r\n            return;\r\n        }\r\n\r\n        firebase.ref(\"/person\").child(id).remove();\r\n        setFeedbackMessageState({msg: \"Removed successfully\", color: \"blue\"});\r\n        feedbackMessage.current.style.display = \"block\";\r\n        setTimeout(() => {props.showPersonForm(false)}, 2000);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(props.personRemove) removePersonHandler(props.personRemove);\r\n\r\n    }, [props.personRemove]);\r\n\r\n    const addPersonHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        if(!personState){\r\n            return;\r\n        }\r\n\r\n        if(!feedbackMessage.current){\r\n            return;\r\n        }\r\n\r\n        if(personState.id){\r\n            firebase.ref(\"/person\").child(personState.id).set(personState);\r\n            return\r\n        }\r\n\r\n        if(!personState.firstName && !personState.lastName){\r\n            event.preventDefault();\r\n            setFeedbackMessageState({msg: \"Fields first and last name must be filled\", color: \"red\"});\r\n            feedbackMessage.current.style.display = \"block\";\r\n            return;            \r\n        }\r\n\r\n        if(personState.contact? !personState.contact.email : false){\r\n            event.preventDefault();\r\n            setFeedbackMessageState({msg: \"Fields email must be filled\", color: \"red\"});\r\n            feedbackMessage.current.style.display = \"block\";\r\n            return;            \r\n        }\r\n\r\n        try {\r\n            event.preventDefault();\r\n            firebase.ref(\"/person\").push().set(personState);\r\n            setFeedbackMessageState({msg: \"Saved successfully\", color: \"blue\"});\r\n            feedbackMessage.current.style.display = \"block\";\r\n            setTimeout(() => {props.showPersonForm(false)}, 2000);\r\n        } catch (error) {\r\n            event.preventDefault();\r\n            setFeedbackMessageState({msg: \"Error\", color: \"red\"});\r\n            feedbackMessage.current.style.display = \"block\";\r\n        }\r\n        \r\n    }\r\n\r\n    const listPersonHandler = () => {\r\n\r\n        const results = firebase.ref('/person').on('value', data => {\r\n            if(!data.val()){\r\n                return;\r\n            }\r\n\r\n            let personData = data.val(); \r\n            let person: Person;\r\n            let listPerson: Person[] = [];\r\n\r\n            for(const key in personData){\r\n                person = personData[key];\r\n                person.id = key;\r\n                listPerson.push(person);\r\n                props.setPersonListState([...listPerson]);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        listPersonHandler();\r\n\r\n    }, []);\r\n\r\n    const btnCancelHandler = () => {\r\n\r\n        setFeedbackMessageState({msg: \"\", color: \"\"});\r\n        \r\n        props.showPersonForm(false);\r\n    }\r\n\r\n    return <>\r\n            <form className={classes.personForm} onSubmit={addPersonHandler}>\r\n                <div ref={feedbackMessage} className={classes.feedbackMessage}>\r\n                    <a style={{color: feedbackMessageState? feedbackMessageState.color : undefined}}>{feedbackMessageState? feedbackMessageState.msg : undefined}</a>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" \r\n                        name=\"firstName\" \r\n                        value={personState.firstName} \r\n                        onChange={inputChangeHandler} \r\n                        id=\"first-name\" \r\n                        placeholder=\"First Name *\" \r\n                        title=\"Field name\"/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" \r\n                        name=\"lastName\" \r\n                        value={personState.lastName} \r\n                        onChange={inputChangeHandler} \r\n                        id=\"last-name\" \r\n                        placeholder=\"Last Name *\" \r\n                        title=\"Field name\"/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" \r\n                        name=\"email\" value={personState.contact? personState.contact.email : undefined} \r\n                        onChange={inputChangeHandler} \r\n                        id=\"email\" \r\n                        placeholder=\"Email *\" \r\n                        title=\"Field email\"/>\r\n                </div>\r\n                <div>\r\n                    <select name=\"phoneType\" value={personState.contact? personState.contact.phone? personState.contact.phone.phoneType : undefined : contactState.phone? contactState.phone.phoneType : undefined} \r\n                    onChange={inputChangeHandler}>\r\n                        <option value=\"phone\">Phone</option>\r\n                        <option value=\"cellphone\">Cell Phone</option>\r\n                    </select>\r\n                    <input type=\"phone\" \r\n                        value={personState.contact? personState.contact.phone? personState.contact.phone.phoneNumber : undefined : contactState.phone? contactState.phone.phoneNumber : undefined} \r\n                        onChange={inputChangeHandler} \r\n                        name=\"phoneNumber\" \r\n                        id=\"phone\" \r\n                        placeholder=\"Phone number\" \r\n                        title=\"Field phone\"/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={btnCancelHandler} type=\"reset\" title=\"Button cancel submit\">Cancel</button>\r\n                    <button type=\"submit\" title=\"Button submit person\">{personState.id? \"Update\" : \"Create\"}</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n\r\n}\r\n\r\nexport default PersonForm;","D:\\My Documents\\building-map\\src\\Interfaces\\Person.tsx",[],"D:\\My Documents\\building-map\\src\\Components\\Map\\MapSignout.tsx",["76"],"import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { user } from \"../../Interfaces/Person\";\r\n\r\nconst MapSignout = (props: any) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const signOutHandler = () => {\r\n        history.push(\"/\");\r\n        props.setUserState(user);\r\n    }\r\n\r\n    return <div>\r\n                <a>What up {props.user.userName}! </a>\r\n                <button onClick={signOutHandler}>Sing Out</button>\r\n            </div>\r\n\r\n}\r\n    \r\n\r\nexport default MapSignout;",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":87,"column":21,"nodeType":"83","endLine":87,"endColumn":102},{"ruleId":"84","severity":1,"message":"85","line":34,"column":11,"nodeType":"86","messageId":"87","endLine":34,"endColumn":37},{"ruleId":"84","severity":1,"message":"88","line":35,"column":9,"nodeType":"86","messageId":"87","endLine":35,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":135,"column":8,"nodeType":"91","endLine":135,"endColumn":21,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":262,"column":8,"nodeType":"91","endLine":262,"endColumn":21,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":274,"column":15,"nodeType":"86","messageId":"87","endLine":274,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":345,"column":21,"nodeType":"83","endLine":345,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":346,"column":21,"nodeType":"83","endLine":346,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":347,"column":21,"nodeType":"83","endLine":347,"endColumn":24},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"89","severity":1,"message":"96","line":29,"column":8,"nodeType":"91","endLine":29,"endColumn":26,"suggestions":"97"},{"ruleId":"84","severity":1,"message":"98","line":18,"column":24,"nodeType":"86","messageId":"87","endLine":18,"endColumn":37},{"ruleId":"89","severity":1,"message":"99","line":87,"column":8,"nodeType":"91","endLine":87,"endColumn":28,"suggestions":"100"},{"ruleId":"84","severity":1,"message":"101","line":134,"column":15,"nodeType":"86","messageId":"87","endLine":134,"endColumn":22},{"ruleId":"89","severity":1,"message":"96","line":158,"column":8,"nodeType":"91","endLine":158,"endColumn":10,"suggestions":"102"},{"ruleId":"81","severity":1,"message":"82","line":170,"column":21,"nodeType":"83","endLine":170,"endColumn":102},{"ruleId":"81","severity":1,"message":"82","line":16,"column":17,"nodeType":"83","endLine":16,"endColumn":20},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'moveCoordinate' is assigned a value but never used.","Identifier","unusedVar","'mouseDown' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'drawMap'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useEffect has missing dependencies: 'addPersonHandler' and 'userState.isAdmin'. Either include them or remove the dependency array.",["106"],"'canvas' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'listPersonHandler'. Either include it or remove the dependency array.",["107"],"'setPhoneState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'removePersonHandler'. Either include it or remove the dependency array.",["108"],"'results' is assigned a value but never used.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [canvasState, drawMap]",{"range":"120","text":"121"},"Update the dependencies array to be: [addPersonHandler, canvasState, userState.isAdmin]",{"range":"122","text":"123"},"Update the dependencies array to be: [listPersonHandler, props.personList]",{"range":"124","text":"125"},"Update the dependencies array to be: [props.personRemove, removePersonHandler]",{"range":"126","text":"127"},"Update the dependencies array to be: [listPersonHandler]",{"range":"128","text":"129"},[3975,3988],"[canvasState, drawMap]",[7686,7699],"[addPersonHandler, canvasState, userState.isAdmin]",[892,910],"[listPersonHandler, props.personList]",[2866,2886],"[props.personRemove, removePersonHandler]",[5043,5045],"[listPersonHandler]"]